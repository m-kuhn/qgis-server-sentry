diff --git a/src/server/services/wfs3/qgswfs3handlers.cpp b/src/server/services/wfs3/qgswfs3handlers.cpp
index 698f1404e8..79b056f9b8 100644
--- a/src/server/services/wfs3/qgswfs3handlers.cpp
+++ b/src/server/services/wfs3/qgswfs3handlers.cpp
@@ -1106,6 +1106,7 @@ const QList<QgsServerQueryStringParameter> QgsWfs3CollectionsItemsHandler::field
 
 void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &context ) const
 {
+  QgsMessageLog::logMessage( QStringLiteral( "handle request" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
   if ( ! context.project() )
   {
     throw QgsServerApiImproperlyConfiguredException( QStringLiteral( "Project is invalid or undefined" ) );
@@ -1116,17 +1117,22 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
   // Check if the layer is published, raise not found if it is not
   checkLayerIsAccessible( mapLayer, context );
 
+  QgsMessageLog::logMessage( QStringLiteral( "layer is accessible" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
+
   const std::string title { mapLayer->title().isEmpty() ? mapLayer->name().toStdString() : mapLayer->title().toStdString() };
 
   // Get parameters
   QVariantMap params = values( context );
 
+  QgsMessageLog::logMessage( QStringLiteral( "switch '%1'" ).arg( QgsServerRequest::methodToString( context.request()->method() ) ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
+
   switch ( context.request()->method() )
   {
     // //////////////////////////////////////////////////////////////
     // Retrieve features
     case QgsServerRequest::Method::GetMethod:
     {
+      QgsMessageLog::logMessage( QStringLiteral( "get features" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       // Validate inputs
       bool ok { false };
 
@@ -1288,6 +1294,7 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
       long i { 0 };
       QMap<QgsFeatureId, QString> fidMap;
 
+      QgsMessageLog::logMessage( QStringLiteral( "looping features" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       while ( features.nextFeature( feat ) )
       {
         // Ignore records before offset
@@ -1298,6 +1305,7 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
         }
         i++;
       }
+      QgsMessageLog::logMessage( QStringLiteral( "end looping features" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
 
       // Count features
       long matchedFeaturesCount = 0;
@@ -1323,6 +1331,7 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
       }
 
       json data = exporter.exportFeaturesToJsonObject( featureList );
+      QgsMessageLog::logMessage( QStringLiteral( "exported to json" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
 
       // Patch feature IDs with server feature IDs
       for ( int i = 0; i < featureList.length(); i++ )
@@ -1363,6 +1372,7 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
         }
       }
 
+      QgsMessageLog::logMessage( QStringLiteral( "this and that" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       // Add prev - next links
       if ( offset != 0 )
       {
@@ -1398,13 +1408,16 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
         { "navigation", navigation }
       };
 
+      QgsMessageLog::logMessage( QStringLiteral( "write" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       write( data, context, htmlMetadata );
+      QgsMessageLog::logMessage( QStringLiteral( "done" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       break;
     }
     // //////////////////////////////////////////////////////////////
     // Create a new feature
     case QgsServerRequest::Method::PostMethod:
     {
+      QgsMessageLog::logMessage( QStringLiteral( "post" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       // First: check permissions
       const QStringList wfstInsertLayerIds = QgsServerProjectUtils::wfstInsertLayerIds( *context.project() );
       if ( ! wfstInsertLayerIds.contains( mapLayer->id() ) || ! mapLayer->dataProvider()->capabilities().testFlag( QgsVectorDataProvider::Capability::AddFeatures ) )
@@ -1545,10 +1558,12 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
     // Error
     default:
     {
+      QgsMessageLog::logMessage( QStringLiteral( "throw not implemented exception: %1" ).arg( QgsServerRequest::methodToString( context.request()->method() ) ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       throw QgsServerApiNotImplementedException( QStringLiteral( "%1 method is not implemented." )
           .arg( QgsServerRequest::methodToString( context.request()->method() ) ) );
     }
   } // end switch
+  QgsMessageLog::logMessage( QStringLiteral( "and we are finished" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
 }
 
 QgsWfs3CollectionsFeatureHandler::QgsWfs3CollectionsFeatureHandler()
