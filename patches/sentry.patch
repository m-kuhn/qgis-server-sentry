diff --git a/src/server/CMakeLists.txt b/src/server/CMakeLists.txt
index 65fce97de7..5a91bcb3b2 100644
--- a/src/server/CMakeLists.txt
+++ b/src/server/CMakeLists.txt
@@ -51,6 +51,7 @@ set(QGIS_SERVER_SRCS
   qgsfeaturefilter.cpp
   qgsstorebadlayerinfo.cpp
   qgsserverquerystringparameter.cpp
+  watchdog.cpp
 )
 
 set (QGIS_SERVER_HDRS
@@ -67,6 +68,7 @@ set (QGIS_SERVER_HDRS
   qgsserverquerystringparameter.h
   qgsserversettings.h
   qgsservicemodule.h
+  watchdog.h
 )
 
 
@@ -148,6 +150,26 @@ install(TARGETS qgis_server
 
 # end qgis_server library
 
+# start sentry
+include(FetchContent)
+
+set(SENTRY_BUILD_SHARED_LIBS ON CACHE INTERNAL "")  # Forces the value
+set(SENTRY_ENABLE_INSTALL ON CACHE INTERNAL "")  # Forces the value
+
+FetchContent_Declare(
+  sentry
+  GIT_REPOSITORY https://github.com/getsentry/sentry-native.git
+  GIT_TAG        0.5.3
+)
+FetchContent_MakeAvailable(sentry)
+
+# Will also affect the sentry build
+option(BUILD_SHARED_LIBS "Build using shared libraries" ON)
+
+target_link_libraries(qgis_server sentry::sentry)
+
+# end sentry
+
 # add test resources, e.g. standard test font
 set(QGIS_SERVER_TESTRCCS ../../tests/testdata/testdata.qrc)
 
diff --git a/src/server/qgsserver.cpp b/src/server/qgsserver.cpp
index db8fc755d2..96805548b9 100644
--- a/src/server/qgsserver.cpp
+++ b/src/server/qgsserver.cpp
@@ -50,6 +50,9 @@
 #include <fcgi_stdio.h>
 #include <cstdlib>
 
+#include <QScopeGuard>
+#include <sentry.h>
+#include "watchdog.h"
 
 // Server status static initializers.
 // Default values are for C++, SIP bindings will override their
@@ -65,6 +68,8 @@ QgsServiceRegistry *QgsServer::sServiceRegistry = nullptr;
 
 Q_GLOBAL_STATIC( QgsServerSettings, sSettings );
 
+Q_GLOBAL_STATIC( Watchdog, sWatchdog );
+
 QgsServer::QgsServer()
 {
   // QgsApplication must exist
@@ -77,6 +82,12 @@ QgsServer::QgsServer()
   mConfigCache = QgsConfigCache::instance();
 }
 
+QgsServer::~QgsServer()
+{
+  sWatchdog()->exit();
+  sWatchdog()->wait();
+}
+
 QFileInfo QgsServer::defaultAdminSLD()
 {
   return QFileInfo( QStringLiteral( "admin.sld" ) );
@@ -189,6 +200,16 @@ bool QgsServer::init()
     return false;
   }
 
+  sentry_options_t *options = sentry_options_new();
+  sentry_init(options);
+
+  qInfo() << "QGIS Server thread running on " << QThread::currentThread();
+  sWatchdog()->start();
+  QgsApplication::instance()->processEvents(); // Needed to start thread
+  sWatchdog()->wakeUp();
+
+  // QObject::connect( QgsApplication::instance(), &QCoreApplication::aboutToQuit, sWatchdog(), []() { qWarning() << "Terminating"; sWatchdog()->exit(); sWatchdog()->wait(); } );
+
   QCoreApplication::setOrganizationName( QgsApplication::QGIS_ORGANIZATION_NAME );
   QCoreApplication::setOrganizationDomain( QgsApplication::QGIS_ORGANIZATION_DOMAIN );
   QCoreApplication::setApplicationName( QgsApplication::QGIS_APPLICATION_NAME );
@@ -384,6 +405,18 @@ void QgsServer::putenv( const QString &var, const QString &val )
 
 void QgsServer::handleRequest( QgsServerRequest &request, QgsServerResponse &response, const QgsProject *project )
 {
+  sentry_value_t crumb = sentry_value_new_breadcrumb("default", QStringLiteral( "Request: %1" ).arg( request.url().toString() ).toUtf8() );
+  sentry_add_breadcrumb( crumb );
+
+  QObject::connect( QgsApplication::messageLog(), qOverload<const QString &, const QString &, Qgis::MessageLevel>(&QgsMessageLog::messageReceived), QgsApplication::instance(), []( const QString &message, const QString &tag, Qgis::MessageLevel level ) {
+    sentry_value_t crumb = sentry_value_new_breadcrumb( "default", QStringLiteral( "[%1] %2" ).arg( tag, message ).toUtf8() );
+    sentry_add_breadcrumb( crumb );
+  } );
+
+  sWatchdog()->wakeUp();
+  qInfo() << "Handling request :: " << request.url().toString();
+  QScopeGuard guard = qScopeGuard( [request] { qInfo() << "Done with request :: " << request.url().toString(); sWatchdog()->sleep(); } );
+
   const Qgis::MessageLevel logLevel = QgsServerLogger::instance()->logLevel();
   {
 
diff --git a/src/server/qgsserver.h b/src/server/qgsserver.h
index 47159845d1..ae558b239a 100644
--- a/src/server/qgsserver.h
+++ b/src/server/qgsserver.h
@@ -54,6 +54,8 @@ class SERVER_EXPORT QgsServer
      */
     QgsServer();
 
+    ~QgsServer();
+
     /**
      * Set environment variable
      * \param var environment variable name
diff --git a/src/server/watchdog.cpp b/src/server/watchdog.cpp
new file mode 100644
index 0000000000..4fde0bcc6c
--- /dev/null
+++ b/src/server/watchdog.cpp
@@ -0,0 +1,64 @@
+#include "watchdog.h"
+#include "qgsmessagelog.h"
+#include "qgis.h"
+#include <csignal>
+#include <QtGlobal>
+#include <QEventLoop>
+#include <QDebug>
+#include "qgsapplication.h"
+#include <QMutexLocker>
+
+void Watchdog::run()
+{
+  QgsMessageLog::logMessage("-- Watchdog running --", "watchdog", Qgis::Info);
+  QTimer feedbackTimer;
+  connect( &feedbackTimer, &QTimer::timeout, this, [=]() {
+    QMutexLocker locker( &mMutex );
+    if ( mCounter != -1 )
+    {
+      mCounter++;
+      if ( mCounter > mTimeout )
+        bark();
+    }
+  } );
+  feedbackTimer.setSingleShot( false );
+  feedbackTimer.start( 1000 );
+
+  const QString timeoutEnv = getenv( "QGIS_SERVER_WATCHDOG_TIMEOUT" ); // in msec
+  bool timeoutOk = false;
+  if ( !timeoutEnv.isEmpty() )
+  {
+    mTimeout = timeoutEnv.toInt( &timeoutOk );
+    qWarning() << "Watchdog initialized with timeout: " << mTimeout;
+  }
+
+  if ( !timeoutOk )
+  {
+    qWarning() << "Default timeout 1000";
+    QgsMessageLog::logMessage( "No QGIS_SERVER_WATCHDOG_TIMEOUT specified, defaulting to 1000", QStringLiteral( "Server" ), Qgis::MessageLevel::Warning );
+    mTimeout = 1000;
+  }
+  // From msec to sec
+  mTimeout /= 1000;
+
+  qInfo() << "Starting watchdog thread on " << QThread::currentThread();
+  exec();
+  qInfo() << "Ending watchdog";
+}
+
+void Watchdog::wakeUp()
+{
+  QMutexLocker locker( &mMutex );
+  mCounter = 0;
+}
+
+void Watchdog::sleep()
+{
+  QMutexLocker locker( &mMutex );
+  mCounter = -1;
+}
+
+void Watchdog::bark()
+{
+  qFatal( "BOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOM" );
+}
diff --git a/src/server/watchdog.h b/src/server/watchdog.h
new file mode 100644
index 0000000000..642c2ba044
--- /dev/null
+++ b/src/server/watchdog.h
@@ -0,0 +1,20 @@
+#include <QThread>
+#include <QTimer>
+#include <QMutex>
+
+class Watchdog : public QThread
+{
+  public:
+    void run();
+
+    void wakeUp();
+    void sleep();
+
+  private:
+    void bark();
+
+  private:
+    QMutex mMutex;
+    int mCounter;
+    int mTimeout;
+};
