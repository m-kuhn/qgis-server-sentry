diff --git a/src/core/layout/qgslayoutitemlabel.cpp b/src/core/layout/qgslayoutitemlabel.cpp
index df93c82d574..251e7c69e3b 100644
--- a/src/core/layout/qgslayoutitemlabel.cpp
+++ b/src/core/layout/qgslayoutitemlabel.cpp
@@ -171,6 +171,7 @@ void QgsLayoutItemLabel::contentChanged()
       mHtmlLoaded = false;
 
       const QUrl baseUrl = QUrl::fromLocalFile( mLayout->project()->absoluteFilePath() );
+      mWebPage->settings()->setObjectCacheCapacities(0, 0, 0);
       mWebPage->mainFrame()->setHtml( textToDraw, baseUrl );
 
       //For very basic html labels with no external assets, the html load will already be
diff --git a/src/server/CMakeLists.txt b/src/server/CMakeLists.txt
index 65fce97de79..cc9d91c65e1 100644
--- a/src/server/CMakeLists.txt
+++ b/src/server/CMakeLists.txt
@@ -148,6 +148,26 @@ install(TARGETS qgis_server
 
 # end qgis_server library
 
+# start sentry
+include(FetchContent)
+
+set(SENTRY_BUILD_SHARED_LIBS ON CACHE INTERNAL "")  # Forces the value
+set(SENTRY_ENABLE_INSTALL ON CACHE INTERNAL "")  # Forces the value
+
+FetchContent_Declare(
+  sentry
+  GIT_REPOSITORY https://github.com/getsentry/sentry-native.git
+  GIT_TAG        0.6.0
+)
+FetchContent_MakeAvailable(sentry)
+
+# Will also affect the sentry build
+option(BUILD_SHARED_LIBS "Build using shared libraries" ON)
+
+target_link_libraries(qgis_server sentry::sentry)
+
+# end sentry
+
 # add test resources, e.g. standard test font
 set(QGIS_SERVER_TESTRCCS ../../tests/testdata/testdata.qrc)
 
diff --git a/src/server/qgis_map_serv.cpp b/src/server/qgis_map_serv.cpp
index 2608ca74ec0..2334863cdab 100644
--- a/src/server/qgis_map_serv.cpp
+++ b/src/server/qgis_map_serv.cpp
@@ -90,7 +90,16 @@ int main( int argc, char *argv[] )
     QgsFcgiServerResponse response( request.method() );
     if ( ! request.hasError() )
     {
-      server.handleRequest( request, response );
+      try
+      {
+        server.handleRequest( request, response );
+      }
+      catch ( QgsException &ex )
+      {
+        // Internal server error
+        response.sendError( 500, QStringLiteral( "Internal Server Error" ) );
+        QgsMessageLog::logMessage( ex.what(), QStringLiteral( "Server" ), Qgis::MessageLevel::Critical );
+      }
     }
     else
     {
diff --git a/src/server/qgsserver.cpp b/src/server/qgsserver.cpp
index db8fc755d23..e5e5c385aaa 100644
--- a/src/server/qgsserver.cpp
+++ b/src/server/qgsserver.cpp
@@ -50,6 +50,8 @@
 #include <fcgi_stdio.h>
 #include <cstdlib>
 
+#include <QScopeGuard>
+#include <sentry.h>
 
 // Server status static initializers.
 // Default values are for C++, SIP bindings will override their
@@ -77,6 +79,10 @@ QgsServer::QgsServer()
   mConfigCache = QgsConfigCache::instance();
 }
 
+QgsServer::~QgsServer()
+{
+}
+
 QFileInfo QgsServer::defaultAdminSLD()
 {
   return QFileInfo( QStringLiteral( "admin.sld" ) );
@@ -189,6 +195,11 @@ bool QgsServer::init()
     return false;
   }
 
+  sentry_options_t *options = sentry_options_new();
+  sentry_init(options);
+
+  qInfo() << "QGIS Server thread running on " << QThread::currentThread();
+
   QCoreApplication::setOrganizationName( QgsApplication::QGIS_ORGANIZATION_NAME );
   QCoreApplication::setOrganizationDomain( QgsApplication::QGIS_ORGANIZATION_DOMAIN );
   QCoreApplication::setApplicationName( QgsApplication::QGIS_APPLICATION_NAME );
@@ -384,9 +395,17 @@ void QgsServer::putenv( const QString &var, const QString &val )
 
 void QgsServer::handleRequest( QgsServerRequest &request, QgsServerResponse &response, const QgsProject *project )
 {
+  sentry_value_t crumb = sentry_value_new_breadcrumb("default", QStringLiteral( "Request: %1" ).arg( request.url().toString() ).toUtf8() );
+  sentry_add_breadcrumb( crumb );
+
+  QObject::connect( QgsApplication::messageLog(), qOverload<const QString &, const QString &, Qgis::MessageLevel>(&QgsMessageLog::messageReceived), QgsApplication::instance(), []( const QString &message, const QString &tag, Qgis::MessageLevel level ) {
+    sentry_value_t crumb = sentry_value_new_breadcrumb( "default", QStringLiteral( "[%1] %2" ).arg( tag, message ).toUtf8() );
+    sentry_add_breadcrumb( crumb );
+  } );
+
   const Qgis::MessageLevel logLevel = QgsServerLogger::instance()->logLevel();
   {
-
+    QScopeGuard postProcessEvents = qScopeGuard( [] { qApp->processEvents(); } );
     const QgsScopedRuntimeProfile profiler { QStringLiteral( "handleRequest" ), QStringLiteral( "server" ) };
 
     qApp->processEvents();
diff --git a/src/server/qgsserver.h b/src/server/qgsserver.h
index 47159845d11..ae558b239ad 100644
--- a/src/server/qgsserver.h
+++ b/src/server/qgsserver.h
@@ -54,6 +54,8 @@ class SERVER_EXPORT QgsServer
      */
     QgsServer();
 
+    ~QgsServer();
+
     /**
      * Set environment variable
      * \param var environment variable name
diff --git a/src/server/services/wfs3/qgswfs3handlers.cpp b/src/server/services/wfs3/qgswfs3handlers.cpp
index 698f1404e82..79b056f9b8c 100644
--- a/src/server/services/wfs3/qgswfs3handlers.cpp
+++ b/src/server/services/wfs3/qgswfs3handlers.cpp
@@ -1106,6 +1106,7 @@ const QList<QgsServerQueryStringParameter> QgsWfs3CollectionsItemsHandler::field
 
 void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &context ) const
 {
+  QgsMessageLog::logMessage( QStringLiteral( "handle request" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
   if ( ! context.project() )
   {
     throw QgsServerApiImproperlyConfiguredException( QStringLiteral( "Project is invalid or undefined" ) );
@@ -1116,17 +1117,22 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
   // Check if the layer is published, raise not found if it is not
   checkLayerIsAccessible( mapLayer, context );
 
+  QgsMessageLog::logMessage( QStringLiteral( "layer is accessible" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
+
   const std::string title { mapLayer->title().isEmpty() ? mapLayer->name().toStdString() : mapLayer->title().toStdString() };
 
   // Get parameters
   QVariantMap params = values( context );
 
+  QgsMessageLog::logMessage( QStringLiteral( "switch '%1'" ).arg( QgsServerRequest::methodToString( context.request()->method() ) ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
+
   switch ( context.request()->method() )
   {
     // //////////////////////////////////////////////////////////////
     // Retrieve features
     case QgsServerRequest::Method::GetMethod:
     {
+      QgsMessageLog::logMessage( QStringLiteral( "get features" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       // Validate inputs
       bool ok { false };
 
@@ -1288,6 +1294,7 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
       long i { 0 };
       QMap<QgsFeatureId, QString> fidMap;
 
+      QgsMessageLog::logMessage( QStringLiteral( "looping features" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       while ( features.nextFeature( feat ) )
       {
         // Ignore records before offset
@@ -1298,6 +1305,7 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
         }
         i++;
       }
+      QgsMessageLog::logMessage( QStringLiteral( "end looping features" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
 
       // Count features
       long matchedFeaturesCount = 0;
@@ -1323,6 +1331,7 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
       }
 
       json data = exporter.exportFeaturesToJsonObject( featureList );
+      QgsMessageLog::logMessage( QStringLiteral( "exported to json" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
 
       // Patch feature IDs with server feature IDs
       for ( int i = 0; i < featureList.length(); i++ )
@@ -1363,6 +1372,7 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
         }
       }
 
+      QgsMessageLog::logMessage( QStringLiteral( "this and that" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       // Add prev - next links
       if ( offset != 0 )
       {
@@ -1398,13 +1408,16 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
         { "navigation", navigation }
       };
 
+      QgsMessageLog::logMessage( QStringLiteral( "write" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       write( data, context, htmlMetadata );
+      QgsMessageLog::logMessage( QStringLiteral( "done" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       break;
     }
     // //////////////////////////////////////////////////////////////
     // Create a new feature
     case QgsServerRequest::Method::PostMethod:
     {
+      QgsMessageLog::logMessage( QStringLiteral( "post" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       // First: check permissions
       const QStringList wfstInsertLayerIds = QgsServerProjectUtils::wfstInsertLayerIds( *context.project() );
       if ( ! wfstInsertLayerIds.contains( mapLayer->id() ) || ! mapLayer->dataProvider()->capabilities().testFlag( QgsVectorDataProvider::Capability::AddFeatures ) )
@@ -1545,10 +1558,12 @@ void QgsWfs3CollectionsItemsHandler::handleRequest( const QgsServerApiContext &c
     // Error
     default:
     {
+      QgsMessageLog::logMessage( QStringLiteral( "throw not implemented exception: %1" ).arg( QgsServerRequest::methodToString( context.request()->method() ) ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
       throw QgsServerApiNotImplementedException( QStringLiteral( "%1 method is not implemented." )
           .arg( QgsServerRequest::methodToString( context.request()->method() ) ) );
     }
   } // end switch
+  QgsMessageLog::logMessage( QStringLiteral( "and we are finished" ), QStringLiteral( "Server" ), Qgis::MessageLevel::Info );
 }
 
 QgsWfs3CollectionsFeatureHandler::QgsWfs3CollectionsFeatureHandler()
